import { Audio } from 'expo-av';

/**
 * WhiteNoiseGenerator: A utility class for programmatically generating and playing white noise
 * with pink noise filtering for a smoother sound profile.
 * 
 * This implementation creates a WAV format buffer in memory without requiring external audio files.
 * It's compatible with Expo managed workflow and doesn't require native modules.
 */
class WhiteNoiseGenerator {
  private sound: Audio.Sound | null = null;
  private isPlaying: boolean = false;
  private volume: number = 0.5; // Default volume
  private whiteNoiseBuffer: ArrayBuffer | null = null;
  private fadeInterval: NodeJS.Timeout | null = null;

  /**
   * Initialize audio settings and prepare white noise buffer
   */
  public async initialize(): Promise<boolean> {
    try {
      // Request audio focus using Expo Audio API
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: false,
        staysActiveInBackground: true,
        playsInSilentModeIOS: true,
        shouldDuckAndroid: false,
        playThroughEarpieceAndroid: false,
      });
      
      // Generate white noise buffer
      await this.createWhiteNoiseBuffer();
      
      return true;
    } catch (error) {
      console.error('Failed to initialize WhiteNoiseGenerator:', error);
      return false;
    }
  }
  
  /**
   * Create a buffer with white noise data
   * This approach uses a WAV file format with PCM encoding
   */
  private async createWhiteNoiseBuffer(): Promise<void> {
    try {
      // Create a WAV file with white noise
      // Using 44.1kHz sample rate, 2 channels, 16-bit PCM
      const sampleRate = 44100;
      const seconds = 3;  // 3 seconds of audio (will be looped)
      const numChannels = 1;  // Mono
      const bytesPerSample = 2;  // 16-bit audio
      
      // Calculate sizes
      const numSamples = sampleRate * seconds;
      const dataSize = numSamples * numChannels * bytesPerSample;
      const fileSize = 44 + dataSize;  // 44 bytes for WAV header
      
      // Create buffer
      const buffer = new ArrayBuffer(fileSize);
      const view = new DataView(buffer);
      
      // Write WAV header
      // "RIFF" chunk descriptor
      this.writeString(view, 0, 'RIFF');
      view.setUint32(4, fileSize - 8, true);  // File size - 8
      this.writeString(view, 8, 'WAVE');
      
      // "fmt " sub-chunk
      this.writeString(view, 12, 'fmt ');
      view.setUint32(16, 16, true);  // Subchunk1Size (16 for PCM)
      view.setUint16(20, 1, true);   // AudioFormat (1 for PCM)
      view.setUint16(22, numChannels, true);  // NumChannels
      view.setUint32(24, sampleRate, true);  // SampleRate
      view.setUint32(28, sampleRate * numChannels * bytesPerSample, true);  // ByteRate
      view.setUint16(32, numChannels * bytesPerSample, true);  // BlockAlign
      view.setUint16(34, 8 * bytesPerSample, true);  // BitsPerSample
      
      // "data" sub-chunk
      this.writeString(view, 36, 'data');
      view.setUint32(40, dataSize, true);  // Subchunk2Size
      
      // White noise generation
      const amplitude = 0.2;  // Lower amplitude for less harsh noise
      let b0 = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0;
      
      for (let i = 0; i < numSamples; i++) {
        // Generate smoother pink-ish noise (less harsh than pure white)
        const white = Math.random() * 2 - 1;
        
        // Apply pink noise filtering
        b0 = 0.99886 * b0 + white * 0.0555179;
        b1 = 0.99332 * b1 + white * 0.0750759;
        b2 = 0.96900 * b2 + white * 0.1538520;
        b3 = 0.86650 * b3 + white * 0.3104856;
        b4 = 0.55000 * b4 + white * 0.5329522;
        b5 = -0.7616 * b5 - white * 0.0168980;
        
        // Mix pink noise components
        let value = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
        b6 = white * 0.115926;
        
        // Scale to fit 16-bit range, with amplitude control
        value = Math.max(Math.min(value * amplitude, 1), -1) * 32767;
        
        // Write sample to buffer
        view.setInt16(44 + i * bytesPerSample, value, true);
      }
      
      this.whiteNoiseBuffer = buffer;
    } catch (error) {
      console.error('Error creating white noise buffer:', error);
    }
  }
  
  /**
   * Helper function to write a string into a DataView
   */
  private writeString = (view: DataView, offset: number, string: string): void => {
    for (let i = 0; i < string.length; i++) {
      view.setUint8(offset + i, string.charCodeAt(i));
    }
  }

  /**
   * Start playing white noise with optional fade-in
   * @returns Promise resolving to true if playback started successfully
   */
  public async play(): Promise<boolean> {
    try {
      // Initialize if not already done
      if (!this.whiteNoiseBuffer) {
        const initialized = await this.initialize();
        if (!initialized) {
          console.warn('Could not initialize white noise buffer, skipping audio playback');
          return false;
        }
      }

      if (this.isPlaying) {
        return true; // Already playing
      }

      // Safety check
      if (!this.whiteNoiseBuffer) {
        console.warn('White noise buffer not available, skipping audio playback');
        return false;
      }
      
      // Unload any existing sound
      if (this.sound) {
        await this.sound.unloadAsync();
      }
      
      // Load the white noise buffer
      this.sound = new Audio.Sound();
      await this.sound.loadAsync({ uri: 'data:audio/wav;base64,' + this._arrayBufferToBase64(this.whiteNoiseBuffer) }, 
        { isLooping: true, volume: 0, shouldPlay: true });
      
      this.isPlaying = true;
      
      // Fade in for smoother start
      await this.fadeIn();
      
      return true;
    } catch (error) {
      console.error('Error playing white noise:', error);
      return false;
    }
  }
  
  /**
   * Convert ArrayBuffer to Base64 string
   */
  private _arrayBufferToBase64(buffer: ArrayBuffer): string {
    let binary = '';
    const bytes = new Uint8Array(buffer);
    for (let i = 0; i < bytes.byteLength; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  }

  /**
   * Stop playing white noise with fade-out
   */
  public async stop(): Promise<void> {
    if (!this.isPlaying || !this.sound) {
      return;
    }

    try {
      // Fade out for smoother stop
      await this.fadeOut();
      
      // Stop the sound
      await this.sound.stopAsync();
      await this.sound.unloadAsync();
      this.sound = null;
      this.isPlaying = false;
    } catch (error) {
      console.error('Error stopping white noise:', error);
      this.isPlaying = false; // Ensure state is updated even if there's an error
      this.sound = null;
    }
  }

  /**
   * Fade in the volume gradually to avoid clicks
   */
  public async fadeIn(duration: number = 1000): Promise<void> {
    if (!this.sound || !this.isPlaying) return;
    
    try {
      // Clear any existing fade interval
      if (this.fadeOutInterval) {
        clearInterval(this.fadeOutInterval);
        this.fadeOutInterval = null;
      }
      
      const steps = 20;
      const stepTime = duration / steps;
      let currentStep = 0;
      
      // Set initial volume to 0
      await this.sound.setVolumeAsync(0);
      
      // Create a new interval for fading in
      return new Promise<void>((resolve) => {
        this.fadeOutInterval = setInterval(async () => {
          currentStep++;
          const newVolume = Math.min((currentStep / steps) * this.volume, this.volume);
          
          if (this.sound) {
            await this.sound.setVolumeAsync(newVolume);
          }
          
          if (currentStep >= steps) {
            // Cleanup interval when done
            if (this.fadeOutInterval) {
              clearInterval(this.fadeOutInterval);
              this.fadeOutInterval = null;
            }
            resolve();
          }
        }, stepTime);
      });
    } catch (error) {
      console.error('Error during fade in:', error);
    }
  }

  /**
   * Fade out the volume gradually to avoid clicks
   * @param duration Time in ms for the fadeout
   */
  public async fadeOut(duration: number = 1000): Promise<void> {
    if (!this.sound || !this.isPlaying) return;
    
    try {
      // Clear any existing fade interval
      if (this.fadeOutInterval) {
        clearInterval(this.fadeOutInterval);
        this.fadeOutInterval = null;
      }
      
      const steps = 20;
      const stepTime = duration / steps;
      let currentStep = 0;
      
      // Get current volume
      const startVolume = this.sound ? (await this.sound.getStatusAsync()).volume : this.volume;
      
      // Create a new interval for fading out
      return new Promise<void>((resolve) => {
        this.fadeOutInterval = setInterval(async () => {
          currentStep++;
          const newVolume = Math.max(startVolume * (1 - currentStep / steps), 0);
          
          if (this.sound) {
            await this.sound.setVolumeAsync(newVolume);
          }
          
          if (currentStep >= steps) {
            // Cleanup interval when done
            if (this.fadeOutInterval) {
              clearInterval(this.fadeOutInterval);
              this.fadeOutInterval = null;
            }
            resolve();
          }
        }, stepTime);
      });
    } catch (error) {
      console.error('Error during fade out:', error);
    }
  }

  /**
   * Set the volume level (0.0 to 1.0)
   * @param volume Value between 0.0 and 1.0
   */
  public async setVolume(volume: number): Promise<void> {
    this.volume = Math.max(0, Math.min(1, volume));
    
    if (this.sound && this.isPlaying) {
      try {
        await this.sound.setVolumeAsync(this.volume);
      } catch (error) {
        console.error('Failed to set volume:', error);
      }
    }
  }
  
  /**
   * Get current volume setting
   * @returns Current volume value between 0.0 and 1.0
   */
  public getVolume(): number {
    return this.volume;
  }
  
  /**
   * Check if white noise is currently playing
   * @returns True if playing, false otherwise
   */
  public getIsPlaying(): boolean {
    return this.isPlaying;
  }
  
  /**
   * Get current sound volume value
   * @returns Promise resolving to current volume value
   */
  public async getCurrentVolume(): Promise<number> {
    if (this.sound && this.isPlaying) {
      const status = await this.sound.getStatusAsync();
      if (status.isLoaded && 'volume' in status) {
        return status.volume;
      }
    }
    return this.volume;
  }

  /**
   * Clean up resources
   */
  public async cleanup(): Promise<void> {
    try {
      // Clear any fade interval
      if (this.fadeInterval) {
        clearInterval(this.fadeInterval);
        this.fadeInterval = null;
      }
      
      // Stop playback if running
      if (this.isPlaying && this.sound) {
        await this.sound.stopAsync();
        this.isPlaying = false;
      }
      
      // Unload sound object
      if (this.sound) {
        await this.sound.unloadAsync();
        this.sound = null;
      }
      
      // Clear buffer
      this.whiteNoiseBuffer = null;
    } catch (error) {
      console.error('Failed to cleanup WhiteNoiseGenerator:', error);
    }
  }
}

export default new WhiteNoiseGenerator();
